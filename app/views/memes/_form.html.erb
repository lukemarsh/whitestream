<div class="modal indicate" tabindex="-1" role="dialog">
  <div class="modal-dialog">
    <div class="progress progress-striped active">
      <div class="progress-bar"  role="progressbar" aria-valuemin="0" aria-valuenow="0" aria-valuemax="100">
        <span class="sr-only">45% Complete</span>
      </div>
    </div>
  </div>
</div>
<h1>1/ Create your image</h1>
<div class="row" id="new_meme">
  <div class="col-md-6">
    <canvas id="memecanvas" width="100%">
      Sorry, canvas not supported
    </canvas>
    <canvas id="rawimage" width="100%" style="display:none;"></canvas>
    <% if @raw_image %>
      <%= image_tag @raw_image, :class => 'mfnotransform', :id => 'default-image', :crossorigin => 'anonymous' %>
    <% elsif @copied_image %>
      <%= image_tag @copied_image, :class => 'mfnotransform', :id => 'default-image', :crossorigin => 'anonymous' %>
    <% else %>
      <img src="" id="default-image" class="mfnotransform" crossorigin="anonymous">
    <% end %>
  </div>
  <div class="col-md-6" id="controls">
    <div class="form-group">
      <span class="btn btn-default btn-file">
        <span class="glyphicon glyphicon-upload"></span>
        Upload image <%= file_field(:image, :meme) %>
      </span>
    </div>
    <div class="form-group">
      Scale&nbsp;<input id='scale' type='range' min='0.05' max='4' value='1' step='0.01' style="width:40%"/>
    </div>
    <div class="form-group">
      <% if @top_line %>
        <%= text_field_tag 'topLine', @top_line, :onkeyup => 'doTransform()', :maxlength => '24', :class => 'form-control' %>
      <% else %>
        <input type='text' placeholder='TOP LINE' id='topLine' onkeyup='doTransform()' oninput='doTransform' onpaste='doTransform' class="form-control" maxlength="24" />
      <% end %>
    </div>
    <div class="form-group">
      <% if @bottom_line %>
        <%= text_field_tag 'bottomLine', @bottom_line, :onkeyup => 'doTransform()', :maxlength => '24', :class => 'form-control' %>
      <% else %>
        <input type='text' placeholder='BOTTOM LINE' id='bottomLine' onkeyup='doTransform()' oninput='doTransform' onpaste='doTransform' class="form-control" maxlength="24" />
      <% end %>
    </div>
    <label>Text colour</label>
    <br>
    <div class="btn-group" data-toggle="buttons">
      <label for="black" class="btn btn-default colour" data-colour="#000000">
        BLACK
        <input type="radio" id="black" name="colour" value="black">
      </label>
    </div>
    <div class="btn-group" data-toggle="buttons">
      <label for="black" class="btn btn-default colour" data-colour="#ffffff">
        WHITE
        <input type="radio" id="black" name="colour" value="white">
      </label>
    </div>
    <br>
    <br>
    <label>Tags</label>
    <div class="form-group">
      <%= hidden_field_tag "meme[category_ids][]", nil %>
      <% Category.all.each do |category| %>
        <div class="btn-group" data-toggle="buttons">
          <%= label_tag dom_id(category), :class => "btn btn-default" do %>
            <span class="glyphicon glyphicon-tag"></span> <%= category.name %>
            <%= check_box_tag "meme[category_ids][]", category.id, @meme.category_ids.include?(category.id), id: dom_id(category) %>
          <% end %>
        </div>
      <% end %>
    </div>
  </div>
</div>
<hr>
<h1>2/ Write your article <span>(optional)</span></h1>
<%= text_area 'meme', 'article', value: @meme.article  %>
<br><br>
<div class="form-group">
  <button id="download" class="btn btn-primary">
    Submit
  </button>
</div>
<script>

  $('input[type="checkbox"]:checked').each(function(){
      $(this).parents('label').toggleClass('active');
  });

  var canvas;
  var rawimage;
  var canvasWidth;
  var ctx;
  var x;
  var y;
  var fileInput;
  var img;

  window.onload = function() {
    prepareExample();
  }

  function prepareExample() {
    img = document.getElementById('default-image');

    var deviceWidth = window.innerWidth;
    canvasWidth = 958;
    canvasHeight = 721;
    canvas = document.getElementById('memecanvas');
    rawimage = document.getElementById('rawimage');

    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    rawimage.width = canvasWidth;
    rawimage.height = canvasHeight;

    ctx = canvas.getContext("2d");
    raw_ctx = rawimage.getContext("2d");

    x = canvas.width/2 - img.width/2;
    y = canvas.height/2 - img.height/2;

    ctx.drawImage(img, x, y);
    raw_ctx.drawImage(img, x, y);

    ctx.textAlign = 'center';
    ctx.font = '64pt MyriadPro-BoldCond';
    ctx.strokeStyle = 'transparent';
    ctx.fillStyle = '#000';

    doTransform();

    fileInput = document.getElementById("image_meme");
    fileInput.addEventListener('change', function(e) {
      var reader = new FileReader();
      reader.onload = function(event){
        img.onload = function() {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          raw_ctx.clearRect(0, 0, canvas.width, canvas.height);
          document.getElementById('scale').value = 1;
          x = canvas.width/2 - img.width/2;
          y = canvas.height/2 - img.height/2;

          ctx.drawImage(img, x, y);
          raw_ctx.drawImage(img, x, y);
          doTransform();
        }
        img.src = reader.result;
      }
      reader.readAsDataURL(fileInput.files[0]);
    }, false);

    var download = document.getElementById('download');
    download.addEventListener('click', function(e) {
      var data = canvas.toDataURL("image/png;base64;");
      var raw_data = rawimage.toDataURL("image/png;base64;");
      var file = dataURLtoBlob(data);
      var raw_file = dataURLtoBlob(raw_data);
      if ($("#image_meme")[0].files[0]) {
        var raw_image = $("#image_meme")[0].files[0];
      } else {
        var copied_image = $("#default-image").attr('src');
      }
      var article = $("#meme_article").val();
      var topLine = $("#topLine").val().toUpperCase();
      var bottomLine = $("#bottomLine").val().toUpperCase();
      var categories = $("input[type='checkbox']:checked");
      var arr = [];

      categories.each(function(){
        arr.push($(this).val());
      });

      var categoryIdsArray = arr;

      var fd = new FormData();
      fd.append("image", file);
      fd.append("top_line", topLine);
      fd.append("bottom_line", bottomLine);
      fd.append("article", article);
      fd.append("raw_image", raw_file);
      fd.append("copied_image", copied_image);
      fd.append("category_ids", categoryIdsArray);

      if ($("#image_meme")[0].files[0] || copied_image) {

        $('.indicate').modal('show');

        request = $.ajax({
          url: '/memes',
          xhrFields: {
            onprogress: function (e) {
              if (e.lengthComputable) {
                //console.log(e.loaded / e.total * 100 + '%');
                $(".progress-bar").width(e.loaded / e.total * 100 + '%').attr('aria-valuenow', e.loaded / e.total * 100 + '%');
              }
            }
          },
          type: "POST",
          dataType: "JSON",
          data: fd,
          cache: false,
          processData: false,
          contentType: false
        });

        //debugger

        request.done(function (response, textStatus, jqXHR){
          window.location.href = '/memes/'+response.id;
        });

      } else {
        alert("Please upload an image");
      }

    }, false);

    scale = document.getElementById('scale');
    scale.addEventListener('change', doTransform, false);
    colour = $('.colour');
    colour.click(function() {
      $("input[type='radio']").parent().removeClass("active");
      ctx.fillStyle = $(this).data('colour');
      doTransform();
    });

    ctx.textAlign = 'center';
    ctx.font = '64pt MyriadPro-BoldCond';
    ctx.strokeStyle = 'transparent';
    ctx.fillStyle = '#000';
  }

  function dataURLtoBlob(dataURL) {

    // Decode the dataURL
    var binary = atob(dataURL.split(',')[1]);

    // Create 8-bit unsigned array
    var array = [];
    for(var i = 0; i < binary.length; i++) {
      array.push(binary.charCodeAt(i));
    }

    // Return our Blob object
    return new Blob([new Uint8Array(array)], {type: 'image/png'});
  }

  function doTransform() {
    ctx.save();
    raw_ctx.save();
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    raw_ctx.clearRect(0, 0, canvas.width, canvas.height);

    ctx.translate(canvas.width/2, canvas.height/2);
    raw_ctx.translate(canvas.width/2, canvas.height/2);

    var val = document.getElementById('scale').value;
    ctx.scale(val, val);
    raw_ctx.scale(val, val);

    ctx.translate(-canvas.width/2, -canvas.height/2);
    raw_ctx.translate(-canvas.width/2, -canvas.height/2);

    ctx.drawImage(img, x, y);
    raw_ctx.drawImage(img, x, y);

    ctx.restore();
    raw_ctx.restore();

    createText();
  }

  function createText() {
    topLine = document.getElementById('topLine').value;
    topLine = topLine.toUpperCase();
    bottomLine = document.getElementById('bottomLine').value;
    bottomLine = bottomLine.toUpperCase();

    wrapText(ctx, topLine, canvas.width/2, 80, canvasWidth-canvasWidth/6, 30);

    wrapText(ctx, bottomLine, canvas.width/2, canvas.height - 20, canvasWidth-canvasWidth/6, 30);
  }

  function wrapText(ctx, text, x, y, maxWidth, lineHeight) {
    var words = text.split(' ');
    var line = '';

    for(var n = 0; n < words.length; n++) {
      var testLine = line + words[n] + ' ';
      var metrics = ctx.measureText(testLine);
      var testWidth = metrics.width;
      if (testWidth > maxWidth && n > 0) {
        ctx.strokeText(line, x, y);
        ctx.fillText(line, x, y);
        line = words[n] + ' ';
        y += lineHeight;
      }
      else {
        line = testLine;
      }
    }
    ctx.strokeText(line, x, y);
    ctx.fillText(line, x, y);
  }
</script>