<div class="row">
  <div class="col-md-6">
    <canvas id="memecanvas" width="479" height="356">
      Sorry, canvas not supported
    </canvas>
    <% if @meme.image.length > 0 %>
      <%= image_tag @meme.image, :class => 'mfnotransform', :id => 'default-image', :crossorigin => 'anonymous' %>
    <% else %>
      <img src="/assets/1148990_10151516396361277_1514704461_n.jpg" id="default-image" class="mfnotransform" crossorigin="anonymous">
    <% end %>
  </div>
  <div class="col-md-6">
    <div class="form-group">
      <span class="btn btn-default btn-file">
        <span class="glyphicon glyphicon-upload"></span>
        Upload image <%= file_field(:image, :meme) %>
      </span>
    </div>
    <div class="form-group">
      Scale&nbsp;<input id='scale' type='range' min='0.05' max='4' value='1' step='0.01' style="width:40%"/>
    </div>
    <div class="row form-group">
      <div class="col-md-8">
        <input type='text' value='TOP LINE' id='topLine' onkeyup='doTransform()' oninput='doTransform' onpaste='doTransform' class="form-control" />
      </div>
      <div class="col-md-4">
        <div class="btn-group">
          <button data-colour="#000000" data-target="top" class="black btn btn-default">BLACK</button>
        </div>
        <div class="btn-group">
          <button data-colour="#FFFFFF" data-target="top" class="default btn white btn-default">WHITE</button>
        </div>
      </div>
    </div>
    <div class="row form-group">
      <div class="col-md-8">
        <input type='text' value='BOTTOM LINE' id='bottomLine' onkeyup='doTransform()' oninput='doTransform' onpaste='doTransform' class="form-control" />
      </div>
      <div class="col-md-4">
        <div class="btn-group">
          <button data-colour="#000000" data-target="bottom" class="black btn btn-default">BLACK</button>
        </div>
        <div class="btn-group">
          <button data-colour="#FFFFFF" data-target="bottom" class="default btn white btn-default">WHITE</button>
        </div>
      </div>
    </div>
    <h4>Tags</h4>
    <div class="form-group">
      <%= hidden_field_tag "meme[category_ids][]", nil %>
      <% Category.all.each do |category| %>
        <div class="btn-group" data-toggle="buttons">
          <%= label_tag dom_id(category), :class => "btn btn-default" do %>
            <span class="glyphicon glyphicon-tag"></span> <%= category.name %>
            <%= check_box_tag "meme[category_ids][]", category.id, @meme.category_ids.include?(category.id), id: dom_id(category) %>
          <% end %>
        </div>
      <% end %>
    </div>
    <div class="form-group">
      <input type="submit" id="download" class="btn btn-primary" />
    </div>
  </div>
</div>
<%= bootsy_area "", :article %>
<script>

  $('input[type="checkbox"]:checked').each(function(){
      $(this).parents('label').toggleClass('active');
  });

  var canvas = document.getElementById("memecanvas");
  var ctx = canvas.getContext("2d");

  var canvasOffset = $("#memecanvas").offset();
  var offsetX = canvasOffset.left;
  var offsetY = canvasOffset.top;

  var startX;
  var startY;

  var pi2 = Math.PI * 2;
  var resizerRadius = 8;
  var rr = resizerRadius * resizerRadius;
  var imageX = 0;
  var imageY = 0;
  var imageWidth, imageHeight, imageRight, imageBottom;
  var draggingImage = false;
  var startX;
  var startY;

  var defaultColour = $("button.default").data('colour');

  var img = document.getElementById('default-image');
  img.onload = function() {
    imageWidth = img.width;
    imageHeight = img.height;
    imageRight = imageX + imageWidth;
    imageBottom = imageY + imageHeight;

    ctx.textAlign = 'center';
    ctx.font = '32pt MyriadPro-BoldCond';
    ctx.strokeStyle = 'transparent';
    ctx.fillStyle = defaultColour;

    draw(true, false);
  }

  function createText() {
    topLine = document.getElementById('topLine').value;
    bottomLine = document.getElementById('bottomLine').value;
    topLine = topLine.toUpperCase();
    bottomLine = bottomLine.toUpperCase();

    wrapText(ctx, topLine, canvas.width/2, canvas.height - canvas.height/1.2, imageWidth-imageWidth/3, 30);

    wrapText(ctx, bottomLine, canvas.width/2, canvas.height - canvas.height/8, imageWidth-imageWidth/3, 30);
  }

  function draw(withAnchors, withBorders) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    ctx.drawImage(img, 0, 0, img.width, img.height, imageX, imageY, imageWidth, imageHeight);
    createText();
  }


  function hitImage(x, y) {
    return (x > imageX && x < imageX + imageWidth && y > imageY && y < imageY + imageHeight);
  }

  function handleMouseDown(e) {
      startX = parseInt(e.clientX - offsetX);
      startY = parseInt(e.clientY - offsetY);
      draggingImage = hitImage(startX, startY);
      imageWidth = img.width;
  }

  function handleMouseUp(e) {
      draggingImage = false;
      draw(true, false);
  }

  function handleMouseOut(e) {
      handleMouseUp(e);
  }

  function handleMouseMove(e) {

    if (draggingImage) {

        imageClick = false;

        mouseX = parseInt(e.clientX - offsetX);
        mouseY = parseInt(e.clientY - offsetY);

        // move the image by the amount of the latest drag
        var dx = mouseX - startX;
        var dy = mouseY - startY;
        imageX += dx;
        imageY += dy;
        imageRight += dx;
        imageBottom += dy;
        // reset the startXY for next time
        startX = mouseX;
        startY = mouseY;

        // redraw the image with border
        draw(false, true);

    }


  }

  function dataURLtoBlob(dataURL) {

    // Decode the dataURL
    var binary = atob(dataURL.split(',')[1]);

    // Create 8-bit unsigned array
    var array = [];
    for(var i = 0; i < binary.length; i++) {
      array.push(binary.charCodeAt(i));
    }

    // Return our Blob object
    return new Blob([new Uint8Array(array)], {type: 'image/png'});
  }

  function doTransform() {
    ctx.save();
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    ctx.translate(canvas.width/2, canvas.height/2);

    var val = document.getElementById('scale').value;
    ctx.scale(val, val);

    ctx.translate(-canvas.width/2, -canvas.height/2);

    ctx.drawImage(img, imageX, imageY);

    ctx.restore();

    createText();
  }

  function wrapText(ctx, text, x, y, maxWidth, lineHeight) {
    var words = text.split(' ');
    var line = '';

    for(var n = 0; n < words.length; n++) {
      var testLine = line + words[n] + ' ';
      var metrics = ctx.measureText(testLine);
      var testWidth = metrics.width;
      if (testWidth > maxWidth && n > 0) {
        ctx.strokeText(line, x, y);
        ctx.fillText(line, x, y);
        line = words[n] + ' ';
        y += lineHeight;
      }
      else {
        line = testLine;
      }
    }
    ctx.strokeText(line, x, y);
    ctx.fillText(line, x, y);
  }

  function imageLoader(input) {
    if (input.files && input.files[0]) {
      var reader = new FileReader();
      reader.onload = function (e) {
        img = new Image();
        img.onload = function(){
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          document.getElementById('scale').value = 1;
          imageWidth = img.width;
          imageHeight = img.height;
          imageRight = imageX + imageWidth;
          imageBottom = imageY + imageHeight;
          draw(true, true);
        }
        img.src = reader.result;
      }
      reader.readAsDataURL(input.files[0]);
    }
  }

  function downloadImage() {
    var data = canvas.toDataURL("image/png;base64;");
    var file = dataURLtoBlob(data);
    var article = $("#_article").val();
    var topLine = $("#topLine").val().toUpperCase();
    var bottomLine = $("#bottomLine").val().toUpperCase();
    var categories = $("input[type='checkbox']:checked");
    var arr = [];

    categories.each(function(){
      arr.push($(this).val());
    });

    var categoryIdsArray = arr;

    var fd = new FormData();
    fd.append("image", file);
    fd.append("top_line", topLine);
    fd.append("bottom_line", bottomLine);
    fd.append("article", article);
    fd.append("category_ids", categoryIdsArray);

    request = $.ajax({
      url: '/memes',
      type: "POST",
      dataType: "JSON",
      data: fd,
      processData: false,
      contentType: false
    });

    request.done(function (response, textStatus, jqXHR){
      window.location.href = '/memes/'+response.id;
    });
  }


  $("#memecanvas").mousedown(function (e) {
    handleMouseDown(e);
  });
  $("#memecanvas").mousemove(function (e) {
    handleMouseMove(e);
  });
  $("#memecanvas").mouseup(function (e) {
    handleMouseUp(e);
  });
  $("#memecanvas").mouseout(function (e) {
    handleMouseOut(e);
  });
  $("#download").click(function() {
    downloadImage();
  });
  $("#image_meme").change(function() {
    imageLoader(this);
  });
  $("#scale").change(function() {
    doTransform();
  });
  $("button").click(function() {
    ctx.fillStyle = $(this).data('colour');
    draw(true, false);
  });
</script>